//! Verifies proof and modifies state root.
//! Used the https://github.com/ebfull/bellman-demo example
//! to generate proof for a dummy circuit.

extern crate bellman;
extern crate ewasm_api;
extern crate pairing;
use bellman::groth16::{prepare_verifying_key, verify_proof, Proof, VerifyingKey};
use ewasm_api::*;
use pairing::bls12_381::{Bls12, Fr};
use pairing::Field;

const VERIFYING_KEY: [u8; 1060] = [
    24, 41, 202, 68, 46, 46, 1, 49, 196, 124, 167, 254, 34, 42, 79, 231, 184, 11, 52, 73, 157, 140,
    195, 63, 62, 141, 52, 70, 46, 157, 227, 21, 10, 99, 119, 91, 102, 55, 147, 213, 244, 224, 21,
    15, 159, 74, 31, 225, 1, 197, 163, 112, 61, 188, 44, 55, 183, 203, 141, 192, 44, 196, 232, 112,
    125, 0, 140, 198, 55, 189, 50, 148, 168, 117, 84, 43, 12, 130, 9, 71, 17, 58, 45, 116, 81, 51,
    83, 57, 9, 144, 44, 85, 117, 146, 204, 75, 11, 211, 69, 113, 14, 53, 33, 1, 8, 197, 248, 93,
    31, 158, 189, 44, 20, 209, 149, 71, 246, 83, 163, 180, 215, 63, 160, 6, 231, 85, 44, 209, 24,
    60, 68, 98, 28, 232, 202, 138, 146, 239, 209, 39, 175, 82, 225, 81, 22, 126, 237, 42, 61, 232,
    134, 21, 220, 129, 172, 104, 80, 11, 115, 99, 49, 8, 63, 57, 4, 69, 167, 226, 96, 8, 143, 176,
    245, 173, 13, 46, 88, 59, 228, 169, 152, 241, 221, 188, 73, 67, 197, 219, 233, 148, 171, 229,
    19, 254, 53, 61, 162, 133, 229, 89, 232, 162, 178, 1, 51, 197, 169, 223, 49, 81, 134, 202, 1,
    231, 209, 11, 125, 19, 172, 127, 61, 190, 221, 152, 50, 132, 243, 144, 187, 12, 87, 254, 57,
    184, 16, 170, 49, 173, 156, 146, 15, 55, 49, 205, 163, 18, 130, 186, 143, 65, 131, 239, 210,
    186, 196, 173, 45, 151, 253, 20, 116, 13, 60, 13, 211, 52, 47, 5, 11, 210, 21, 34, 25, 26, 21,
    239, 167, 139, 15, 227, 152, 145, 158, 201, 94, 195, 30, 198, 12, 40, 152, 252, 65, 161, 100,
    62, 190, 245, 168, 64, 25, 218, 12, 10, 129, 244, 246, 199, 91, 21, 253, 251, 204, 154, 153,
    86, 102, 213, 54, 210, 137, 116, 193, 244, 129, 62, 207, 165, 31, 23, 112, 29, 112, 181, 98,
    171, 18, 117, 237, 165, 171, 55, 177, 120, 151, 113, 104, 95, 90, 42, 158, 215, 81, 24, 170,
    70, 84, 231, 122, 216, 107, 70, 126, 150, 247, 99, 183, 220, 76, 227, 171, 219, 65, 148, 102,
    164, 178, 7, 168, 202, 228, 117, 216, 80, 4, 50, 198, 183, 233, 136, 79, 146, 15, 93, 18, 24,
    253, 216, 109, 52, 107, 202, 76, 182, 230, 195, 242, 255, 235, 235, 29, 200, 211, 47, 124, 75,
    55, 1, 227, 56, 61, 197, 63, 128, 7, 93, 141, 94, 43, 237, 147, 5, 3, 154, 41, 215, 218, 22,
    146, 141, 221, 216, 172, 30, 36, 122, 172, 5, 215, 42, 129, 163, 236, 226, 39, 243, 212, 98,
    55, 94, 243, 140, 44, 28, 193, 233, 123, 112, 225, 145, 35, 208, 212, 171, 198, 18, 50, 146,
    179, 183, 22, 202, 219, 149, 235, 16, 197, 198, 248, 249, 0, 188, 156, 159, 109, 171, 54, 244,
    169, 83, 78, 200, 107, 15, 23, 137, 192, 44, 134, 177, 39, 90, 119, 83, 216, 14, 227, 218, 137,
    30, 243, 153, 69, 86, 244, 186, 233, 93, 20, 29, 131, 219, 142, 46, 183, 195, 59, 74, 52, 57,
    109, 59, 118, 58, 119, 54, 201, 29, 101, 213, 163, 56, 113, 144, 187, 30, 246, 130, 180, 45,
    239, 12, 220, 136, 122, 159, 49, 200, 199, 51, 60, 74, 178, 169, 236, 42, 6, 18, 208, 159, 3,
    218, 184, 173, 162, 42, 100, 132, 98, 99, 7, 69, 11, 33, 31, 228, 53, 85, 84, 152, 75, 210,
    141, 198, 176, 87, 211, 121, 237, 38, 58, 106, 210, 152, 100, 206, 35, 109, 177, 8, 127, 177,
    128, 68, 10, 167, 164, 124, 194, 253, 180, 15, 227, 166, 0, 70, 101, 199, 48, 77, 75, 74, 24,
    255, 255, 163, 9, 21, 3, 34, 243, 123, 154, 152, 225, 252, 55, 240, 85, 245, 20, 243, 251, 26,
    30, 19, 24, 109, 100, 59, 238, 169, 10, 218, 206, 83, 1, 199, 98, 183, 166, 235, 155, 97, 208,
    247, 130, 35, 128, 228, 193, 236, 4, 28, 120, 248, 38, 204, 10, 57, 52, 174, 103, 50, 44, 214,
    33, 114, 147, 207, 237, 165, 181, 88, 154, 92, 162, 39, 230, 237, 16, 124, 200, 72, 188, 25,
    80, 84, 139, 20, 7, 157, 46, 31, 222, 106, 182, 30, 40, 252, 112, 71, 184, 184, 223, 25, 66,
    143, 197, 168, 237, 70, 46, 77, 244, 113, 136, 116, 99, 251, 121, 113, 99, 58, 23, 163, 47, 33,
    1, 60, 69, 159, 81, 226, 85, 42, 194, 35, 252, 236, 185, 245, 77, 204, 245, 218, 130, 15, 241,
    32, 255, 55, 56, 117, 134, 64, 119, 222, 180, 105, 109, 229, 116, 231, 110, 190, 221, 128, 182,
    121, 74, 143, 208, 165, 157, 84, 5, 213, 241, 11, 81, 187, 19, 112, 116, 88, 43, 22, 127, 201,
    64, 127, 121, 31, 55, 170, 152, 77, 182, 2, 198, 165, 122, 197, 143, 192, 192, 142, 91, 214,
    46, 228, 166, 177, 205, 228, 110, 149, 17, 166, 131, 150, 182, 186, 0, 0, 0, 2, 1, 19, 250,
    235, 146, 16, 108, 175, 122, 162, 30, 154, 204, 230, 98, 135, 125, 166, 201, 118, 232, 56, 37,
    172, 71, 137, 44, 154, 84, 10, 69, 176, 98, 103, 2, 249, 138, 32, 111, 58, 191, 184, 207, 203,
    79, 168, 228, 147, 8, 146, 93, 45, 19, 193, 51, 219, 8, 191, 145, 62, 118, 140, 224, 20, 41,
    151, 19, 72, 187, 171, 97, 31, 217, 161, 177, 211, 79, 213, 142, 112, 94, 135, 106, 236, 125,
    79, 150, 128, 241, 10, 26, 97, 83, 95, 168, 188, 4, 137, 149, 173, 37, 72, 216, 178, 97, 144,
    3, 163, 21, 6, 217, 239, 67, 15, 132, 57, 71, 196, 17, 12, 66, 126, 42, 13, 20, 38, 154, 11,
    125, 233, 229, 199, 207, 61, 162, 211, 153, 136, 252, 153, 25, 51, 137, 69, 11, 204, 32, 52,
    159, 83, 3, 101, 158, 144, 80, 29, 171, 219, 209, 164, 163, 20, 76, 77, 60, 21, 227, 168, 186,
    110, 30, 90, 180, 212, 118, 88, 210, 178, 210, 235, 35, 82, 192, 147, 54, 170, 18, 205, 79,
    187, 28, 118,
];

#[cfg(not(test))]
#[no_mangle]
pub extern "C" fn main() {
    let pre_state_root = eth2::load_pre_state_root();
    let mut post_state_root = pre_state_root;

    /*let serialized_proof = vec![
        177, 24, 52, 73, 107, 0, 66, 81, 89, 20, 180, 163, 242, 151, 148, 148, 111, 235, 109, 218,
        233, 75, 118, 147, 25, 124, 168, 94, 182, 49, 106, 232, 241, 255, 68, 180, 48, 94, 149, 15,
        171, 3, 78, 184, 73, 151, 215, 108, 131, 65, 224, 172, 120, 171, 234, 145, 230, 50, 84, 55,
        152, 130, 208, 138, 218, 54, 48, 170, 201, 224, 118, 17, 86, 235, 140, 155, 71, 232, 30,
        118, 155, 51, 26, 243, 167, 90, 204, 147, 228, 47, 10, 14, 246, 31, 220, 0, 4, 91, 47, 163,
        27, 231, 57, 23, 241, 54, 229, 184, 164, 214, 108, 252, 209, 141, 249, 9, 43, 176, 74, 146,
        237, 7, 135, 28, 108, 105, 230, 112, 182, 99, 31, 220, 116, 137, 154, 159, 43, 13, 255, 97,
        146, 84, 147, 162, 179, 208, 168, 82, 179, 169, 178, 10, 55, 116, 212, 212, 21, 246, 160,
        237, 178, 120, 59, 229, 177, 196, 24, 28, 8, 255, 25, 36, 94, 159, 145, 118, 26, 98, 202,
        249, 153, 55, 37, 213, 83, 100, 47, 139, 233, 220, 216, 68,
    ];*/

    assert!(eth2::block_data_size() > 0);

    // Block data only contains serialized proof
    let block_data = eth2::acquire_block_data();
    let serialized_proof = block_data;
    let proof = Proof::read(serialized_proof.as_slice()).unwrap();

    // Prepare verifying key
    let pk = VerifyingKey::<Bls12>::read(VERIFYING_KEY.as_ref()).unwrap();
    let pvk = prepare_verifying_key(&pk);

    // If proof is valid, mark last byte of post state root
    if verify_proof(&pvk, &proof, &[Fr::one()]).unwrap() {
        post_state_root.bytes[31] = 1;
    }

    eth2::save_post_state_root(post_state_root)
}
